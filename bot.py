import json
import logging
import random
import re
from datetime import datetime, timedelta, timezone
from datetime import date as datetimedate
from uuid import uuid4

from alliances.main import *
from core.base import db
from core.config import TOKEN, api_login
from core.main import *
from core.texts import *
from keyboards import menu_markup
from mobu.main import *
from playhouse.postgres_ext import *
from telegram import (InlineKeyboardButton, InlineKeyboardMarkup,
                      InlineQueryResultArticle, InputTextMessageContent)
from telegram.ext import (CallbackQueryHandler, ChosenInlineResultHandler,
                          CommandHandler, Filters, InlineQueryHandler,
                          MessageHandler, Updater)
from triggers.main import *
from users.main import *

# Enable logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.WARNING)

logger = logging.getLogger(__name__)
user_data = {}


def admin_decorator(func):
    def inner(*args, **kwargs):
        user = args[1].bot.get_chat_member(
            args[0].message.chat_id,
            args[0].message.from_user.id)
        if user.status not in ['creator', 'administrator']:
            args[1].bot.send_message(
                chat_id=args[0].message.chat_id,
                text=not_admin_text)
            return
        func(*args, **kwargs)
    return inner


def start(update, context):
    if update.message.chat.type == 'private':

        """Send a message when the command /start is issued."""
        update.message.reply_text(text="–ë–æ—Ç –æ—Ç—Ä—è–¥–∞ OGW", reply_markup=menu_markup())


def trigger_me(update, context):
    svodki_channel = -1001486183416#-1001401627995  # -1001486183416
    main_svodki_channel = -1001369273162
    order_of_grey_wolf = -1001168950089  # -394357133
    mid_id = -394357133 #-1001485556499  # -394357133
    if update.message:
        if update.message.forward_from and update.message.forward_from.id == 265204902:
            if re.search(r'Code \d+ to authorize {}'.format(api_login), update.message.text):
                user_id = update.message.from_user.id
                code = re.search(r'Code (\d+) to authorize {}'.format(api_login), update.message.text).groups()[0]
                process_code(user_id, code)
        elif update.message.text.startswith("üí∞"):
            gs(update, context)
        elif update.message.text.startswith("üì¶"):
            stock(update, context)
        elif update.message.text.startswith("üîî"):
            user_settings(update, context)

    if update.channel_post and update.channel_post.chat.id == svodki_channel:

        update_guilds(update)
        link = ''

        report = update._effective_message.text
        if 'ü§ùHeadquarters news:' in update._effective_message.text:
            text = update._effective_message.text
            alli_reg = r'\n(?P<alliance>[\w\s]+) was (.*\n){1,3}üéñDefense:(.*)'
            alli_def = re.findall(alli_reg, text)
            if alli_def:
                for alli in alli_def:
                    alliance = alli[0].strip()
                    guilds = re.findall(r'(?P<castle>‚òòÔ∏è|üçÜ|üåπ|üê¢|üñ§|üçÅ|ü¶á)(?P<guild>.?\[\w+\])', alli[-1])
                    if guilds:
                        guilds = [x[0] + x[1] for x in guilds]
                        for guild in guilds:
                            last_seen = update.channel_post.forward_date
                            create_alliances_spot(alliance, guild, last_seen, type='guilds')

        elif 'üó∫State of map:' in update._effective_message.text:
            text = update._effective_message.text
            alli_reg = r'(?:\n|$)(?P<spot_name>[\w\d\s.]+)belongs to (?P<alliance_name>[\w\s]+).'
            alli_spot = re.findall(alli_reg, text)
            if alli_spot:
                for spot in alli_spot:
                    last_seen = update.channel_post.forward_date
                    create_alliances_spot(spot[1].strip(), spot[0].strip(), last_seen, type='spots')

        elif '–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å—Ä–∞–∂–µ–Ω–∏–π:' in update._effective_message.text and '–ü–æ –∏—Ç–æ–≥–∞–º —Å—Ä–∞–∂–µ–Ω–∏–π –∑–∞–º–∫–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ:' in update._effective_message.text:
            text = update._effective_message.text

            if update.channel_post.forward_from_chat.id == main_svodki_channel:
                mes_id = update.channel_post.forward_from_message_id

                link = f'<a href="https://t.me/ChatWarsDigest/{mes_id}">–°–≤–æ–¥–∫–∞</a>'

            repl = r'–ü–æ –∏—Ç–æ–≥–∞–º —Å—Ä–∞–∂–µ–Ω–∏–π –∑–∞–º–∫–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ:([\d\D]+)'
            worldtop = re.findall(repl, text)
            if worldtop:

                reg_action = r'(?P<emoj>.*)(?:–í –±–∏—Ç–≤–µ —É –≤–æ—Ä–æ—Ç |–ó–∞—â–∏—Ç–Ω–∏–∫–∏ )(?P<castle>.)'
                reg_gold = r'(?:üèÜ–ê—Ç–∞–∫—É—é—â–∏–µ —Ä–∞–∑–≥—Ä–∞–±–∏–ª–∏ –∑–∞–º–æ–∫ –Ω–∞ |üèÜ–£ –∞—Ç–∞–∫—É—é—â–∏—Ö –æ—Ç–æ–±—Ä–∞–ª–∏ )(?P<gold>\d+) –∑–æ–ª–æ—Ç—ã—Ö –º–æ–Ω–µ—Ç'

                gold_map = {}
                for castle in text.split('\n\n'):
                    gold = 0
                    mobj = re.search(reg_action, castle)
                    if mobj:
                        extra_emo = ''
                        if '—Å–∫—É—á–∞–ª–∏, –Ω–∞ –Ω–∏—Ö –Ω–∏–∫—Ç–æ –Ω–µ –Ω–∞–ø–∞–ª.' in castle:
                            extra_emo = 'üò¥'
                        elif '—Å–æ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–º –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ–º' in castle:
                            extra_emo = 'üòé'
                        elif '–∑–∞—â–∏—Ç–Ω–∏–∫–∏ –ª–µ–≥–∫–æ –æ—Ç–±–∏–ª–∏—Å—å' in castle:
                            extra_emo = 'üëå'
                        elif '—Ä–∞–∑—ã–≥—Ä–∞–ª–∞—Å—å –Ω–∞—Å—Ç–æ—è—â–∞—è –±–æ–π–Ω—è' in castle:
                            extra_emo = '‚ö°Ô∏è'
                        temp_castle = mobj['castle']
                        gold_map[temp_castle] = {'emoj': extra_emo + mobj['emoj']}
                        mobj = re.search(reg_gold, castle)
                        if mobj:
                            if mobj['gold']:
                                gold_map[temp_castle]['gold'] = mobj['gold']
                            else:
                                gold_map[temp_castle]['gold'] = 0

                reg = r'\n(.)([\D\s]+)\+(?P<points>\d+)'
                mobj = re.findall(reg, worldtop[0])
                if mobj:
                    date = date_to_cw_battle(update.channel_post.forward_date)
                    old_date = date - timedelta(hours=8)
                    for castle in mobj:
                        add_world_top(
                            emodji=castle[0], name=castle[1], points=castle[2], old_date=old_date,
                            date=date, action=gold_map[castle[0]].get('emoj'), gold=gold_map[castle[0]].get('gold'))
                    send_world_top(context, mid_id, date, extra=None, link=link)

        if not context.chat_data.get('top', False):
            context.chat_data['top'] = []
            context.chat_data['worst'] = []

        top = []  # ü¶áüê∫[OGW]–ê–ª—å—Ä–∏—è
        top_worst = []
        guilds = ['OGW', 'SIF', 'STG', 'MAG']
        temp_worst = re.findall(r'üõ° –í –±–∏—Ç–≤–µ —É –≤–æ—Ä–æ—Ç (‚òòÔ∏è|üçÜ|üåπ|üê¢|üñ§|üçÅ)(.*)\nüéñ–õ–∏–¥–µ—Ä—ã –∞—Ç–∞–∫–∏:(.*)\nüéñ–õ–∏–¥–µ—Ä—ã –∑–∞—â–∏—Ç—ã:', report)
        for guild in guilds:
            best = []
            worst = []

            if temp_worst:
                for castle in temp_worst:
                    if re.findall(r'\[{}]([\w\d\s\-\_]+)[ |,|\n]'.format(guild), castle[2]):
                        worst += (castle[0], re.findall(r'\[{}]([\w\d\s\-\_]+)[ |,|\n]'.format(guild), castle[2]))
            best = re.findall(r'\[{}]([\w\d\s\-\_]+)[ |,|\n]'.format(guild), report)
            if worst:
                top_worst.append(worst)
            if best:
                if top_worst:
                    for castle in top_worst:
                        for vtik in castle[1]:
                            if vtik in best:
                                best.remove(vtik)
                top += best
        if top or top_worst:
            context.chat_data['top'] += top
            context.chat_data['worst'] += top_worst

        if '–ü–æ –∏—Ç–æ–≥–∞–º —Å—Ä–∞–∂–µ–Ω–∏–π –∑–∞–º–∫–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ' in report:
            text = ''
            if context.chat_data.get('top', []) or context.chat_data.get('worst', []):
                if context.chat_data.get('top', []):
                    text = 'üí™‚≠êÔ∏è–í–æ—Ç –æ–Ω–∏ –Ω–∞—à–∏ –∑–≤—ë–∑–¥—ã {}'.format(', '.join(context.chat_data.get('top', [])))
                if context.chat_data.get('worst', []):
                    text += '\n\nüôàüò±–ê–Ω—Ç–∏ —Ç–æ–ø:\n'.format()
                    for hero in context.chat_data.get('worst', []):
                        hero[1] = ', '.join(hero[1])
                        if hero[0] == 'üê¢':
                            text += '–ö–∞–∫ —Ç–∞–º –≥–æ–≤–æ—Ä—è—Ç –æ–Ω –Ω–∞ —ç—Ç–æ–º <s>—Å–æ–±–∞–∫—É</s> —á–µ—Ä–µ–ø–∞—Ö—É —Å—ä–µ–ª, —Ç–∞–∫ –≤–æ—Ç —ç—Ç–æ –ø—Ä–æ {}'.format(hero[1])
                        elif hero[0] == 'üåπ':
                            text += '{} –µ—Å–ª–∏ —Ç—ã —Ö–æ—Ç–µ–ª –Ω–∞—Ä–≤–∞—Ç—å –¥–µ–≤–æ—á–∫–∞–º —Ü–≤–µ—Ç–æ–≤, –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –±—ã–ª–æ —Ç–æ–ø—Ç–∞—Ç—å –≤—Å—é –∫–ª—É–º–±—É'.format(hero[1])
                        elif hero[0] == 'üçÅ':
                            text += '{} –¥–∞–≤–Ω–æ —Ö–æ—Ç–µ–ª –æ–ª–∞–¥—É—à–µ–∫ —Å –∫–ª–µ–Ω–æ–≤—ã–º —Å–∏—Ä–æ–ø–æ–º'.format(hero[1])
                        elif hero[0] == 'üçÜ':
                            text += '{} —ç—Ç–∏ –±–∞–∫–ª–∞–∂–∞–Ω—ã –Ω–∞ –∑–∞–∫—Ä—É—Ç–∫–∏?'.format(hero[1])
                        elif hero[0] == 'üñ§':
                            text += '{}, –∑–∞—á–µ–º —Ç–µ–±–µ —ç—Ç–æ —á—ë—Ä–Ω–æ–µ —Å–µ—Ä–¥–µ—á–∫–æ, –ª—É—á—à–µ –≤–æ—Ç —Ç–µ–±–µ –Ω–∞—à–µ‚ù§Ô∏è'.format(hero[1])
                        elif hero[0] == '‚òòÔ∏è' or hero[0] == '‚òò':
                            text += '{}, –ø–æ–∫–∞ —Ç—ã –∏—â–µ—à—å –∫–ª–µ–≤–µ—Ä —Å —á–µ—Ç—ã—Ä—å–º—è –ª–µ–ø–µ—Å—Ç–∫–∞–º–∏, —É–¥–∞—á–∞ —Ç–∏—Ö–æ–Ω—å–∫–æ –ø—Ä–æ—Ö–æ–¥–∏—Ç –º–∏–º–æ.'.format(hero[1])
                context.bot.send_message(chat_id=order_of_grey_wolf, text=text, parse_mode='html')
            else:
                text = '–£–≤—ã, –Ω–∏–∫—Ç–æ –Ω–µ –ø–æ–ø–∞–ª –≤ —Ç–æ–ø'
                context.bot.send_message(chat_id=order_of_grey_wolf, text=text, parse_mode='html')
            context.chat_data['top'] = []
            context.chat_data['users'] = []
        return

    if update.edited_message:
        return
    chat_id = update.message.chat_id
    trigger_name = update.message.text
    trigger = find_trigger(chat_id, trigger_name)
    if trigger:
        send_trigger(context, chat_id, trigger)

    # mobu
    if update.message.forward_from and update.message.forward_from.id == 265204902:
        if '/fight' in update.message.text.lower():
            create_mobu(update, context)

    # update resorce codes
    if update.message.forward_from and update.message.forward_from.id == 265204902:
        if 'Guild Warehouse' in update.message.text:
            for row in update.message.text.split('\n'):
                mobj = re.search(r'(\w\d+|\d+) ([\w\s]+) x', row)
                if mobj:
                    code, name = mobj.groups()
                    update_resourse_code(name, code)

    # event
    if update.message.forward_from and update.message.forward_from.id == 265204902:
        if '–≥–æ–ª–µ–º—ã –º–æ–≥—É—Ç –±—ã—Ç—å —Ö–∏—Ç—Ä—ã–º–∏' in update.message.text:
            mobs_reg = r'–≥–æ–ª–µ–º—ã –º–æ–≥—É—Ç –±—ã—Ç—å —Ö–∏—Ç—Ä—ã–º–∏!([\s\d\w\n\.]+)'
            class_reg = r'–≤ –¥–≤–µ—Ä–Ω–æ–º –ø—Ä–æ—ë–º–µ –≤—ã–≥–ª—è–¥—è—Ç –∑–Ω–∞–∫–æ–º–æ (.*),'
            date = update.message.forward_date
            mobs = re.search(mobs_reg, update.message.text)
            classes = re.search(class_reg, update.message.text)
            if mobs and classes:
                mobs = mobs.group(1)
                classes = classes.group(1)
                mobs_lvl = re.findall(r'lvl.(\d+)', mobs)
                mean_lvl = sum([int(x) for x in mobs_lvl]) / len(mobs_lvl)
                who_ping = []
                users = get_user_data(type='requestProfile')
                for user in users:
                    user_data = json.loads(user.data)
                    if user_data.get('guild_tag', None) not in ['OGW', 'STG']:
                        continue
                    if user_data['class'] in classes:
                        if abs(user_data['lvl'] - mean_lvl) <= 10:
                            who_ping.append(user_data['userName'])
                text = '–°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å {}\n–ù–∞–¥–æ –∫–ª–∞—Å—Å—ã {}'.format(int(mean_lvl), ''.join([x for x in classes]))
                if (datetime.utcnow().replace(tzinfo=timezone.utc) - date).seconds >= 300:
                    text += '\n\n–ü–†–û–°–¢–†–û–ß–ï–ù–û'
                if who_ping:
                    text += '\n–ù–∞–¥–æ –ø–∏–Ω–≥–∞–Ω—É—Ç—å {}'.format(','.join(who_ping))
                else:
                    text += '\n–ù–µ–∫–æ–≥–æ –ø–∏–Ω–≥–æ–≤–∞—Ç—å'
                context.bot.send_message(chat_id, text)

    # alliance
    if update.message.forward_from and update.message.forward_from.id == 265204902:
        reg_name = r'You found hidden location ([\w\s\d]+.\d\d)'
        reg_code = r'–¢–æ remember the route you associated it with simple combination: ([\w\d]+)'
        reg_alli = r'You found hidden headquarter (\w+\s+\w+)'
        name = re.search(reg_name, update.message.text)
        code = None
        spot_type = None
        if not name:
            name = re.search(reg_alli, update.message.text)
        if name:
            name = name.group(1)
            code = re.search(reg_code, update.message.text)
            if code:
                code = code.group(1)
        if 'headquarter' in update.message.text:
            spot_type = 'Alliance'
        elif 'Mine' in update.message.text:
            spot_type = 'Resources'
        elif 'Fort' in update.message.text or 'Outpost' in update.message.text or 'Tower' in update.message.text:
            spot_type = 'Glory'
        elif 'Ruins' in update.message.text:
            spot_type = 'Magic'
        if update.message.forward_date < datetime(year=2021, month=4, day=1, hour=13, minute=0, second=0).replace(tzinfo=timezone.utc):
            text = '–Ø —Ç–µ–±–µ —á—Ç–æ —à—É—Ç–∫–∞? –ò—â–∏ –Ω–æ–≤—ã–µ.'
            context.bot.send_message(chat_id=chat_id, text=text, parse_mode='html')
        else:

            if all([name, code, spot_type]):
                new_spot = create_spot(name, code, spot_type, chat_id)
                if new_spot:
                    context.bot.send_message(chat_id=chat_id, text=new_spot_text, parse_mode='html')
                else:
                    context.bot.send_message(chat_id=chat_id, text=old_spot_text, parse_mode='html')

    # - gold
    if update.message.forward_from and update.message.forward_from.id == 265204902:
        reg_gold = r'üí∞Gold: -(\d+)'
        if '–¢–≤–æ–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –±–æ—é:' in update.message.text:
            gold = re.search(reg_gold, update.message.text)
            if gold:
                gold = int(gold.group(1))
                texts = []
                if gold >= 1:
                    texts.append('–û–π, –≤—Å—ë, –æ—Ç–¥–∞–ª –¥–µ–Ω—å–≥–∏ –≤—Ä–∞–≥—É, –Ω–µ—Å–∏—Ç–µ –ú–∞—à–µ –≤–∞–ª–µ—Ä—å—è–Ω–∫—É!')
                    texts.append('–Ø —Ç–µ–±—è –∑–∞–ø–∏—Å–∞–ª! –ü–æ–∫–∞ —Ç–æ–ª—å–∫–æ –∫–∞—Ä–∞–Ω–¥–∞—à–æ–º')
                    texts.append('–ü–æ–º–æ—â—å –ø—Ä–∏—à–ª–∞, –æ—Ç–∫—É–¥–∞ –Ω–µ –∂–¥–∞–ª–∏')
                    texts.append('–û–ø—è—Ç—å –Ω–æ–∂–∏–∫ –ª–∞–≥–∞–ª? –î–∞–≤–∞–π –æ–ø—Ä–∞–≤–¥—ã–≤–∞–π —Å–µ–±—è, –ª–µ–Ω—Ç—è–π.')
                    texts.append('–ê –ª—É—á—à–µ –±—ã –≤ –≥–∏–ª—å–¥–∏—é')
                if gold > 2:
                    texts.append('–ê –º–æ–≥ –±—ã –∫—É–ø–∏—Ç—å —Ç—Ä–∞–≤—ã. –°–æ–≤—Å–µ–º —Å–µ–±—è –Ω–µ –±–µ—Ä–µ–∂–µ—à—å')
                    texts.append('–ù–µ —Å–ª–∏—Ç–∞—è –≥–æ–ª–¥–∞? –ß–æ —Ç–∞–º —É –Ω–∞—Å –¥–∞–ª—å—à–µ –ø–æ –≥–µ—à—Ç–∞–ª—å—Ç–∞–º')
                    texts.append('–¢–≤–æ—è –ª–µ–Ω—å - —Ö–∞–ª—è–≤–∞ –¥–ª—è –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞')
                    texts.append('–í–æ—Ç –∑–º–µ–π, –æ—Ç–∫—É–¥–∞ –∑–æ–ª–æ—Ç–æ –ª–∏—à–Ω–µ–µ?üòë')
                if gold > 10:
                    texts.append('–†–µ–∑–∫–æ —É—Ö–æ–¥–∏ –≤ –∑–∞–∫–∞—Ç')
                    texts.append('–ù—É –¥–∞, –º—ã –∂–µ –º–∏–ª–ª–∏–æ–Ω–µ—Ä—ã, –Ω–∞–º —Ç–µ—Ä—è—Ç—å –Ω–µ—á–µ–≥–æ')
                if gold > 15:
                    texts.append('–ì—É–ª—è–π—Ç–µ –Ω–∞ –≤—Å–µ, —á–æ! –û—Ç—Ä—è–¥ OGW –º–æ–∂–µ—Ç —Å–µ–±–µ —ç—Ç–æ –ø–æ–∑–≤–æ–ª–∏—Ç—å!')

                # text = '–ê—Ç–∞—Ç–∞. –¢—ã –∑–Ω–∞–µ—à—å —Å–∫–æ–ª—å–∫–æ –≤—Å–µ–≥–æ –º–æ–∂–Ω–æ –±—ã–ª–æ –∫—É–ø–∏—Ç—å –Ω–∞ {}'.format(gold)
                context.bot.send_message(chat_id=chat_id, text=random.choice(texts), parse_mode='html')
        if '–¢–≤–æ–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –±–æ—é:' in update.message.text and ('üèÖEnraged' in update.message.text or 'üèÖPeacekeeping' in update.message.text):
            texts = ['–û–≥–æ, –≥—Ä–∞—Ü —Å –º–µ–¥–∞–ª—å–∫–æ–π', '–¢–∞–ª–∞–Ω—Ç–ª–∏–≤–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ –≤–∏–¥–Ω–æ —Å—Ä–∞–∑—É', '–¢–∞–∫ —Ç—ã –µ—â—ë –∏ —Ç–∞–ª–∞–Ω—Ç–ª–∏–≤ü•∞']
            context.bot.send_message(chat_id=chat_id, text=random.choice(texts), parse_mode='html')

    # –∫–æ—Ä–æ–≤–∞–Ω
    if update.message.forward_from and update.message.forward_from.id == 265204902:
        if '–û–Ω –ø—ã—Ç–∞–µ—Ç—Å—è –æ–≥—Ä–∞–±–∏—Ç—å –ö–û–†–û–í–ê–ù' in update.message.text:
            context.bot.send_message(chat_id=chat_id, text='/go', parse_mode='html')
        elif '–¢—ã –∑–∞–¥–µ—Ä–∂–∞–ª ' in update.message.text:
            texts = [
                '–º–æ–ª–æ–¥–µ—Ü, –≤–æ–ª—á–∞—Ä–∞, —Ç–∞–∫ –¥–µ—Ä–∂–∞—Ç—å',
                '—Ö–æ—Ä–æ—à, —Ç–µ–ø–µ—Ä—å –æ—Ç–≥—Ä—ã–∑–∏ –µ–º—É –≥–æ–ª–æ–≤—É',
                '–º—ã –≤ —Ç–µ–±–µ –Ω–µ —Å–æ–º–Ω–µ–≤–∞–ª–∏—Å—å',
                '–ú–∞–º–∫–∏–Ω –†–æ–±–∏–Ω –ì—É–¥',
                '–•–∞—Ö! –ü–æ–π–º–∞–ª',
                '–í–∏–∂—É –≤ –î–ü–° –ø–æ—à–µ–ª?']
            context.bot.send_message(chat_id=chat_id, text=random.choice(texts), parse_mode='html')
        elif '–¢—ã –ø—ã—Ç–∞–ª—Å—è –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å' in update.message.text:
            texts = [
                '–Ω–µ —Ä–∞—Å—Å—Ç—Ä–∞–∏–≤–∞–π—Å—è, –º—ã –µ–≥–æ –µ—â–µ –¥–æ–≥–æ–Ω–∏–º',
                '–Ω—É 10 –≥–ø, —ç—Ç–æ 10 –≥–ø',
                '—Ç—Ä–µ–Ω–∏—Ä—É–π—Å—è –¥–∞–ª—å—à–µ, –æ–Ω –µ—â—ë –Ω–µ —Ä–∞–∑ –≤–µ—Ä–Ω–µ—Ç—Å—è',
                '–í —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ –¥–∞–ª–µ–∫–æ –Ω–µ —É–±–µ–∂–∏—Ç',
                '–ó–∞–ø–æ–º–Ω–∏–ª –µ–≥–æ?']
            context.bot.send_message(chat_id=chat_id, text=random.choice(texts), parse_mode='html')

    # —Å—É—Å–ª–∏–∫
    if update.message.forward_from and update.message.forward_from.id == 265204902:
        if '–¢—ã –ø–æ—à–µ–ª —á–µ—Å–∞—Ç—å —Å–≤–æ–µ–≥–æ —Å—É—Å–ª–∏–∫–∞' in update.message.text:
            texts = [
                '–£ —Å—É—Å–ª–∏–∫–∞ –Ω–µ—Ç —Ü–µ–ª–∏. –¢–æ–ª—å–∫–æ –ø—É—Ç—å.',
                '–°—É—Å–ª–∏–∫–∏ –ø—Ä–∞–≤—è—Ç –º–∏—Ä–æ–º, –∏ —Ç–æ—Ç —Å–∏–ª—å–Ω–µ–µ, —É –∫–æ–≥–æ –∏—Ö –±–æ–ª—å—à–µ!', '–ö–æ–≥–¥–∞ —Ç—ã —Å—É—Å–ª–∏–∫ - —Ç—ã –Ω–µ–æ—Ç—Ä–∞–∑–∏–º.',
                '–°—É—Å–ª–∏–∫ - —ç—Ç–æ –∫–∞–∫ –≤–æ–ª–∫. –¢–æ–ª—å–∫–æ –Ω–µ –≤–æ–ª–∫.',
                '–ì–Ω–µ–≤ —Å—É—Å–ª–∏–∫–∞ –Ω–µ —É–¥–µ—Ä–∂–∏–º, –ª—é–±–æ–≤—å –Ω–µ–ø–æ–≤—Ç–æ—Ä–∏–º–∞, –≤–µ—Ä–Ω–æ—Å—Ç—å –±–µ—Å–∫–æ–Ω–µ—á–Ω–∞...',
                '–ü–∞–¥–∞—é—Ç —Å–ª–µ–∑—ã\n–ö–∞–∫ –∫–∞–ø–ª–∏ –¥–æ–∂–¥—è\n–°—É—Å–ª–∏–∫ –∫–∞—Ä–∞–µ—Ç',
                '–¢–∏—Ö—É—é –±–µ–∑–ª—É–Ω–Ω—É—é –Ω–æ—á—å\n–ü—Ä–µ—Ä—ã–≤–∞—é—Ç –∫—Ä–∏–∫–∏ –∏ —Å–ª—ë–∑—ã \n–°—É—Å–ª–∏–∫ –≤—ã—à–µ–ª –Ω–∞ –æ—Ö–æ—Ç—É']
            if 'üêé' in update.message.text:
                texts.append('–í—Å–µ, —á–µ–≥–æ –¥–æ—Å—Ç–∏–≥?\n–ò–∑–≤–æ–∑–∏–≤ –∫–æ–Ω—è –≤ –≥—Ä—è–∑–∏\n–°—É—Å–ª–∏–∫ –ø—Ä–∏–ª–µ–≥.')
                texts.append('–¢–∏—Ö–∞—è –ª—É–Ω–Ω–∞—è –Ω–æ—á—å\n–°–ª—ã—à–Ω–æ, –∫–∞–∫ –≤ –∑–∞–º–∫–µ –†–æ–∑—ã\n–ø–ª–∞—á–µ—Ç –æ–±–∏–∂–µ–Ω–Ω—ã–π –∫–æ–Ω—å.')
            elif 'üê¢' in update.message.text:
                texts.append('–ú–æ–∫—Ä —Å—É—Å–ª–∏–∫.\n–¢—Ä–µ–ø–µ—â–∏ —á–µ—Ä–µ–ø–∞—Ö–∞.\n–û–Ω –∑–æ–ª.')
            elif 'üñ§' in update.message.text:
                texts.append('–ó–∞–º–æ–∫ –∑–∞—Ç–∏—Ö –∏ —Å–ø–∏—Ç\n–°—É—Å–ª–∏–∫ –Ω–∞ –æ—Ö–æ—Ç—É –≤—ã—à–µ–ª\n–ß–µ—Ä–Ω–æ–µ —Å–µ—Ä–¥—Ü–µ –¥—Ä–æ–∂–∏')
            elif 'üê≠' in update.message.text:
                texts.append('–°—É—Å–ª–∏–∫ –Ω–∞ –§–µ—Ä–º–µ.\n–û–±–∏–¥—É –º—ã—à—å –∑–∞—Ç–∞–∏–ª–∞.\n–ù–µ –∫—Ä–æ–¥–µ—Ç—å—Å—è.')
            elif 'üê™' in update.message.text:
                texts.append('–ö–∞–∫–∞—è –≥—Ä—É—Å—Ç—å!\n–°—É—Å–ª–∏–∫–æ–º  –Ω–∞–≥–ª–æ –æ–±–∏–∂–µ–Ω,\n—Ç—É–∂–∏—Ç –≤–µ—Ä–±–ª—é–¥.')
            elif 'üê∑' in update.message.text:
                texts.append('–°–º–æ—Ç—Ä–∏-–∫–∞ —Å—É—Å–ª–∏–∫,\n–õ–µ–≥–∫–æ —Å–º–æ–≥ —Å–≤–∏–Ω—å—é –æ–±–∏–¥–µ—Ç—å.\n–î–æ–≤–æ–ª—å–Ω—ã–π –∫–∞–∫–æ–π!')
            elif 'üï∑' in update.message.text:
                texts.append('–ö–∞–∫ —Ö–æ—Ä–æ—à —Å—É—Å–ª–∏–∫!\n–ü–∞—É–∫–∞ –ø—Ä–∏—Å—Ç—Ä—É–Ω–∏–ª –æ–Ω.\n–ü—É—Å—Ç—å –Ω–µ –∫—É—Å–∞–µ—Ç—Å—è.')
            elif 'üëª' in update.message.text:
                texts.append('–î–∞–∂–µ –ø—Ä–∏–∑—Ä–∞–∫\n–û—Ç —Å—Ç—Ä–∞—Ö–∞ –¥—Ä–æ–∂–∏—Ç.\n–°—É—Å–ª–∏–∫ —Ä–µ–∑–≤–∏—Ç—Å—è.')
            # elif 'üêæüê≠üêú' in update.message.text:
            #     texts.append('–°–º–æ—Ç—Ä–∏-–∫–∞ —Å—É—Å–ª–∏–∫,\n–õ–µ–≥–∫–æ —Å–º–æ–≥ —Å–≤–∏–Ω—å—é –æ–±–∏–¥–µ—Ç—å.\n–î–æ–≤–æ–ª—å–Ω—ã–π –∫–∞–∫–æ–π!')

            if random.randint(1, 100) < 20:
                photos = [
                    'https://faunistics.com/wp-content/uploads/2020/06/1.jpg',
                    'https://lh3.googleusercontent.com/proxy/6auisi0otSFtQRzz3RGq8d-xC9_3TiqarGzV48bK4IFYgLp4_gvRtpcjOTgYDKFjZhuEEsbI5vKKhR2_gr5oQfA04PVYhAE',
                    'https://avatars.mds.yandex.net/get-zen_doc/95163/pub_5b07f7a1799d9d0c5f4d6181_5b08011f1410c3b18bef406c/scale_1200',
                    'https://stihi.ru/pics/2013/04/08/7880.jpg']
                context.bot.send_photo(chat_id=chat_id, photo=random.choice(photos))
            else:
                context.bot.send_message(chat_id=chat_id, text=random.choice(texts), parse_mode='html')

    # –æ–±–∏–∂–µ–Ω —Å—É—Å–ª–∏–∫–æ–º
    if update.message.forward_from and update.message.forward_from.id == 265204902:
        if '–û–±–∏–∂–µ–Ω' in update.message.text:
            castle = None
            mobj = re.search('–û–±–∏–∂–µ–Ω üêæ\w+ –≤–æ–∏–Ω–∞ (?P<castle>.)\w+', update.message.text)
            if mobj:
                castle = mobj['castle']

            texts = [
                '–í–æ —Ç—å–º–µ –Ω–æ—á–∏, –ø—Ä–∏ —Å–≤–µ—Ç–µ –¥–Ω—è\n–ó–ª—É –Ω–µ —É–∫—Ä—ã—Ç—å—Å—è –æ—Ç –º–µ–Ω—è!\n–ü–∞–¥—É—Ç –≤—Å–µ —Ç–µ, –≤ —á—å–∏—Ö –¥—É—à–∞—Ö —Ç—å–º–∞!\n–í–ø–µ—Ä—ë–¥ –≤—Å–µ —Å—É—Å–ª–∏–∫–∏! –£—Ä–∞-–∞–∞!',
                '–û–∫–æ –∑–∞ –æ–∫–æ\n–ó—É–± –∑–∞ –∑—É–±\n–°—É—Å–ª–∏–∫–∏ –ù–æ—á–∏\n–ú–µ—Å—Ç—å –Ω–µ—Å—É—Ç',
                '–í–æ —Ç—å–º–µ –Ω–æ—á–Ω–æ–π –ø—Ä–∏ —Å–≤–µ—Ç–µ –¥–Ω—è!\n–ó–ª—É –Ω–µ —É–∫—Ä—ã—Ç—å—Å—è –æ—Ç –º–µ–Ω—è!\n–ù–∞—Å –Ω–µ –æ–±–∏–¥—è—Ç –∫—Ç–æ –ø–æ–¥—Ä—è–¥!\n–í–ø–µ—Ä—ë–¥ –∂–µ —Å—É—Å–ª–∏–∫–æ–≤ –æ—Ç—Ä—è–¥!',
                '–ß—Ç–æ–± —è–≤–∏—Ç—å –∑–ª–æ–¥–µ—é  - –ª–æ–±–æ—Ç—Ä—è—Å—É\n–ö—É–∑—å–∫–∏–Ω—É –º–∞–º–∞–Ω—é –≤ –ø–æ–ª–Ω—ã–π —Ä–æ—Å—Ç,\n–°—É—Å–ª–∏–∫–∏ –≤—ã—Ö–æ–¥—è—Ç –ø–æ –ø—Ä–∏–∫–∞–∑—É\n–ú—Å—Ç–∏—Ç—å –ø–æ –∑–∞–º–∫–∞–º, –æ—Ö—Ä–∞–Ω—è—è —Å–≤–æ–π –±–ª–æ–∫–ø–æ—Å—Ç',
                '–ú—ã –ø—Ä–∏—à–ª–∏ –∏–∑ –Ω–∏–æ—Ç–∫—É–¥–∞\n–ò —É–π–¥–µ–º –≤–Ω–æ–≤—å –≤ –Ω–∏–∫—É–¥–∞\n–ë—É–¥–µ—Ç –º–µ—Å—Ç—å —Ç–µ–±–µ, –ø–æ—Å–∫—É–¥–∞,\n–ù–µ —Ö–æ–¥–∏ –∫ –Ω–∞–º –Ω–∏–∫–æ–≥–¥–∞',
                '–í —Ç–µ–º–Ω–æ–π –Ω–æ—á–∏, —Å–≤–µ—Ä–∫–∞—è —Ä–µ–∑—Ü–∞–º–∏\n–ö –Ω–µ–ø—Ä–∏—è—Ç–µ–ª—é –æ–±–∏–∂–µ–Ω–Ω—ã–π —Å—É—Å–ª–∏–∫ (–∫—Ä–æ–¥—ë—Ç—å—Å—è)\n–ß—Ç–æ –± –º–µ—Å—Ç—å —Ö–æ–ª–æ–¥–Ω—É—é —Å–≤–µ—Ä—à–∏—Ç—å\n–ò —Å–ø–∏–∑–¥–∏—Ç—å –∫—É–∫—É—Ä—É–∑–∫—É'
            ]
            if castle:
                texts.append('@shovkovytsya @lliyami @Ra18Ra @Wilhe_lm –í–Ω–µ–ø–ª–∞–Ω–æ–≤—ã–π —Å–±–æ—Ä –æ—Ç—Ä—è–¥–∞ —Å—É—Å–ª–∏–∫–æ–≤, –∞—Ç–∞–∫—É–µ–º {}'.format(castle))

            context.bot.send_message(chat_id=chat_id, text=random.choice(texts), parse_mode='html')

    # reports
    if update.message.forward_from and update.message.forward_from.id == 265204902:
        if '–¢–≤–æ–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –±–æ—é:' in update.message.text and '–í—Å—Ç—Ä–µ—á–∞' not in update.message.text:
            date = date_to_cw_battle(update.message.forward_date)
            reg_nick = r'ü¶á.\[\w+\]([\w\s_-]+)‚öî|ü¶á([\w\s_-]+)‚öî|ü¶á\[\w+\]([\w\s_-]+)‚öî'
            nickname = re.match(reg_nick, update.message.text)
            if any(nickname.groups()):
                nickname = [x.strip() for x in nickname.groups() if x is not None][0]
            new_report = create_report(chat_id, nickname, update.message.text, date)
            if not new_report:
                context.bot.send_message(chat_id=chat_id, text=old_report_text, parse_mode='html')

    # update top
    if update.message.forward_from and update.message.forward_from.id == 265204902:
        castles = ['üê¢–¢–æ—Ä—Ç—É–≥–∞', 'üåπ–ó–∞–º–æ–∫ –†–∞—Å—Å–≤–µ—Ç–∞', 'üçÅ–ê–º–±–µ—Ä', 'ü¶á–ù–æ—á–Ω–æ–π –ó–∞–º–æ–∫', 'üñ§–°–∫–∞–ª–∞', 'Past battles']
        date = date_to_cw_battle(update.message.forward_date)

        if all([x in update.message.text for x in castles]):
            reg = r'#\s\d\s(?P<emodji>.)(?P<name>[\D\s]+)üö©(?P<points7>[\d\.]+.)üèÜ(?P<points>\d+)'
            mobj = re.findall(reg, update.message.text)
            if mobj:
                old_top = get_all_world_top(date)
                wt_ordering_old = [x.emodji for x in old_top]
                for obj in mobj:
                    update_world_top(emodji=obj[0], name=obj[1], points=obj[3], date=date)

                new_top = get_all_world_top(date)
                new_top_points = {x.emodji: x.points for x in old_top}
                wt_ordering_new = [x.emodji for x in new_top]
                text = ''
                for castle in wt_ordering_new:
                    if wt_ordering_new.index(castle) != wt_ordering_old.index(castle):

                        if len([key for key, value in new_top_points.items()
                               if value == new_top_points.get(castle)]) > 1:
                            continue
                        if not text:
                            text = '–¢–æ–ø –∏–∑–º–µ–Ω–∏–ª—Å—è'
                        if wt_ordering_new.index(castle) <= wt_ordering_old.index(castle):
                            text += '\n(üî∫{}){}'.format(
                                abs(wt_ordering_new.index(castle) - wt_ordering_old.index(castle)), castle)
                        else:
                            text += '\n(üîª{}){}'.format(
                                abs(wt_ordering_old.index(castle) - wt_ordering_new.index(castle)), castle)
                if text:
                    context.bot.send_message(chat_id=mid_id, text=text, parse_mode='HTML')

    if update.message.forward_from and update.message.forward_from.id == 265204902:
        marks = ['Commander', 'üéñGlory', 'üèÖLevel']
        if all([x in update.message.text for x in marks]):
            tag_reg = r'(.)\[([\w\d]+)\]'

            mobj = re.search(tag_reg, update.message.text)
            if mobj:
                castle, tag = mobj.groups()
            glory_reg = r'üéñGlory: (\d+)'
            mobj = re.search(glory_reg, update.message.text)
            glory = mobj.groups()[0]

            date = update.message.date

            print(castle, tag, glory)


def inline_button(update, context):
    castles = ['ü¶á', '‚òòÔ∏è', 'üçÅ', 'üçÜ', 'üåπ', 'üñ§', 'üê¢']
    if update.callback_query.data in castles:
        emodji = update.callback_query.data
        if emodji == '‚òòÔ∏è':
            emodji = '‚òò'
        user_id = update._effective_user.id
        u_data = user_data[user_id]['calc']
        rep = get_castle_gold(emodji=emodji, date=u_data.get('date', None))
        if rep:
            if 'üõ°' in rep.action:
                action = 'üõ°'
                digits = int(int(u_data.get('def', 0)) / int(u_data.get('gold', 0)) * int(rep.gold))
            elif '‚öî' in rep.action:
                action = '‚öî'
                digits = int(int(u_data.get('atk', 0)) / int(u_data.get('gold', 0)) * int(rep.gold))

            if digits:
                rep.digits = digits
                rep.save()

                update.callback_query.edit_message_text(
                    text="{}{}{}".format(update.callback_query.data, action, digits))
        return
    if update.callback_query.data != '—Ç—ã–∫':
        return
    who = update.callback_query.to_dict().get('from', {}).get('id')
    if not context.chat_data.get('users', []):
        context.chat_data['users'] = set()
        context.chat_data['usernames'] = set()
    clicked = len(context.chat_data.get('users', []))
    context.chat_data['users'].add(who)
    if update.callback_query.to_dict().get('from', {}).get('username'):
        name = update.callback_query.to_dict().get('from', {}).get('username', None)
    else:
        name = '{} {}'.format(
            update.callback_query.to_dict().get('from', {}).get('first_name', None),
            update.callback_query.to_dict().get('from', {}).get('last_name', None))
    context.chat_data['usernames'].add(name)
    if (datetime.utcnow().replace(tzinfo=timezone.utc) - update.callback_query.message.date).seconds > 1200:
        context.bot.answer_callback_query(
            callback_query_id=update.callback_query.id,
            show_alert=True,
            text='–£–∂–µ –Ω–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ')
        update.callback_query.edit_message_text(
            text=button_text + "\n\n–í–æ–ª–∫–æ–≤ –≤ —Å—Ç–∞–µ {}".format(len(context.chat_data.get('users', 0))))
        context.chat_data['users'] = set()
    else:
        if len(context.chat_data.get('users', [])) == clicked:
            texts = ['–¢—ã —É–∂–µ —Ç—ã–∫–∞–ª', '–ë—É–¥–µ—à—å –º–Ω–æ–≥–æ —Ç—ã–∫–∞—Ç—å —Å–ª–æ–º–∞–µ—à—å', '–Ø –∑–∞–ø–∏—Å–∞–ª, –∑–∞–ø–∏—Å–∞–ª', '–õ—É—á—à–µ —Ä–∞–∑–±—É–¥–∏ –°—Ç—ë–ø—É', '–ë–ï–°–ò–®–¨!', '–†–µ–ø–æ—Ä—Ç —Å–¥–∞–ª?']
            if who == 597266304:  # katya
                texts.append('–° —Ç–µ–±—è –Ω—é–¥–µ—Å.')
                texts.append('–ê —Ç—ã –ø–ª–æ—Ö–∞—è –¥–µ–≤–æ—á–∫–∞, –æ—Ç—à–ª—ë–ø–∞—é.')
            elif who == 252167939:  # masha
                texts.append('–î–æ–∫—Ç–æ—Ä–∞ –ø–æ—Ç—ã–∫–∞–π')
                texts.append('–ú–∞–º, –Ω—É —Ö–≤–∞—Ç–∏—Ç.')
            context.bot.answer_callback_query(
                callback_query_id=update.callback_query.id,
                show_alert=True,
                text=random.choice(texts))
        else:
            texts = [
                '–ú–æ–ª–æ–¥–µ—Ü, —Ç–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∏ –±–∞–Ω–æ–∫ –≤—ã–ø–∏—Ç—å', '–ü—Ä–æ–≤–µ—Ä—å –Ω–µ —Å–ª–æ–º–∞–Ω –ª–∏ —à–º–æ—Ç',
                '–ì–æ–ª–¥—É —Å–ª–∏–ª?', '–°—Ç–æ–∫ —Å–¥–∞–ª? –í–¥—Ä—É–≥ –≤ –Ω–∞—Å –≤—ã—à–ª–∏?', '–õ—É—á—à–∏–π']
            if who in [597266304, 252167939, 186909576, 312082400, 622090635, 40660570, 240737677, 199077972]:  # katya, ra, rick, loli, did, bosmer, jazz, bazarov
                texts.append('–ê —Å—Ç—Ä–µ–ª—ã –µ—Å—Ç—å??')
            elif who == 384808946:  # gera
                texts.append('–ù—É, –º–æ–∂–Ω–æ –∏ –∫—É—Ä–µ–π –ø–æ–∫–æ—Ä–º–∏—Ç—å')
            elif who == 217906579:  # wilhelm
                texts.append('–ö–æ–≥–¥–∞ –∞–ø?')
                texts.append('–î–∞–ª –±–æ–≥ –ö–æ—Ä–±–∏–Ω–∞, –¥–∞—Å—Ç –∏ –ø–ª–∞—â')
                texts.append('–ß–∞—Å–∏–∫–∏ —Ç–æ —Ç–∏–∫–∞—é—Ç, –∞ —É —Ç–µ–±—è –ö–æ—Ä–±–∏–Ω –±–µ–∑ –ø–ª–∞—â–∞')
                texts.append('–ê —Ç—ã –∏—â–µ—à—å –ø–ª–∞—â —Å–≤–æ–µ–º—É –∞–ª—Ö—É?')
                texts.append('–ê –º–æ–∂–µ—Ç –Ω—É –µ–≥–æ, —ç—Ç–æ—Ç –ø–ª–∞—â?')
            elif who == 431456872:  # ruda
                texts.append('–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ: —Ç—ã –Ω–∞–π–¥–µ—à—å —Ç–æ—Ç —Ä–µ—Ü–µ–ø—Ç.')
            context.bot.answer_callback_query(
                callback_query_id=update.callback_query.id,
                show_alert=True,
                text=random.choice(texts))
            update.callback_query.edit_message_text(
                text=button_text + "\n\n–í–æ–ª–∫–æ–≤ –≤ —Å—Ç–∞–µ {} \n\n{}".format(
                    len(context.chat_data.get('users', 0)),
                    ', '.join(context.chat_data['usernames'])),
                reply_markup=InlineKeyboardMarkup(
                    inline_keyboard=[[InlineKeyboardButton(text='–ì–æ—Ç–æ–≤!', callback_data='—Ç—ã–∫')]]))


def help(update, context):
    chat_id = update.message.chat_id
    context.bot.send_message(
        chat_id=chat_id,
        text=help_text)


def error(update, context):
    """Log Errors caused by Updates."""
    logger.warning('Update "%s" caused error "%s"', update, context.error)


def inlinequery(update, context):
    global user_data
    query = update.inline_query.query
    user_id = update.inline_query.from_user.id
    if not user_data.get(user_id):
        user_data[user_id] = {}
        user_data[user_id]['stock'] = {}
    stock = get_stock(chat_id=user_id, type='requestStock')
    user_data[user_id]['stock'] = json.loads(stock.data)
    stock = user_data[user_id]['stock']
    results = []
    if query in ['-', '+']:
        if query == '-':
            stock = sorted(stock.items(), key=lambda x: x[1].get('value', 0))
        elif query == '+':
            stock = sorted(stock.items(), key=lambda x: x[1].get('value', 0), reverse=True)
        for key, value in stock:
            results.append(
                InlineQueryResultArticle(
                    id=key,
                    title='{} x {}'.format(value.get('name'), value.get('value')),
                    input_message_content=InputTextMessageContent('/g_deposit {} {}'.format(
                        key, value.get('value')))))
    else:
        for key, value in stock.items():
            if query != 'b':
                results.append(
                    InlineQueryResultArticle(
                        id=key,
                        title='{} x {}'.format(value.get('name'), value.get('value')),
                        input_message_content=InputTextMessageContent('/g_deposit {} {}'.format(
                            key, value.get('value')))))
            elif query == 'b':
                results.append(
                    InlineQueryResultArticle(
                        id=key,
                        title='{} x {}'.format(value.get('name'), value.get('value')),
                        input_message_content=InputTextMessageContent('/wts_{}_{}_2500'.format(
                            key, value.get('value')))))
    results = results[:50]
    if not len(results):
        results.append(InlineQueryResultArticle(
            id=uuid4(),
            title='No item for deposit',
            input_message_content=InputTextMessageContent('shrug')))

    update.inline_query.answer(results, cache_time=1)


def on_result_chosen(update, context):
    user_id = update.chosen_inline_result.from_user.id
    choosen = update.chosen_inline_result.result_id
    stock = get_stock(chat_id=user_id, type='requestStock')
    stock = json.loads(stock.data)
    del stock[choosen]

    create_user_data(user_id, type='requestStock', data=json.dumps(stock))


# def get_tags(castle):
#     tags = ''
#     if '‚öî' in castle.action:
#         tags += '#{}_–ø—Ä–æ–±–∏–ª–∏ '.format(castle.name.strip().replace(' ', '_').lower())
#         if '‚ö°Ô∏è' in castle.action:
#             tags += '#{}_–º–æ–ª–Ω–∏—è '.format(castle.name.strip().replace(' ', '_').lower())
#     elif 'üëåüõ°' in castle.action or 'üò¥' in castle.action:
#         return tags
#     elif 'üõ°' in castle.action:
#         tags += '#{}_–¥–µ—Ñ–Ω—É–ª–∏ '.format(castle.name.strip().replace(' ', '_').lower())
#         if 'üî±' in castle.action:
#             tags += '#{}_–≥–∞ '.format(castle.name.strip().replace(' ', '_').lower())

#     return tags


def calculate_atak(update, context):
    global user_data
    message = update.message
    chat_id = update.message.chat_id
    if update.message.reply_to_message:
        message = update.message.reply_to_message
        if message.forward_from and message.forward_from.id == 265204902 and '–¢–≤–æ–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –±–æ—é:' in message.text:
            m_text = message.text
            m_date = date_to_cw_battle(message.forward_date)
            re_atk = r'‚öî:(?P<atk>\d+).* üõ°:(?P<def>\d+)'
            re_gold = r'üí∞Gold: (?P<gold>[-\d]+)'

            e = re.search(re_atk, m_text)
            x = re.search(re_gold, m_text)
            if not user_data.get(update.message.from_user.id, False):
                user_data[update.message.from_user.id] = {}
            user_data[update.message.from_user.id]['calc'] = dict(e.groupdict(), **x.groupdict(), **{"date": m_date})
        else:
            date = date_to_cw_battle(message.date)
            reg = r'(?P<digit>\d+) (?P<gold>\d+)'
            find = re.search(reg, message.text)
            if find:
                temp_dict = find.groupdict()
                temp_dict['atk'] = temp_dict['def'] = temp_dict['digit']
                del temp_dict['digit']
                if not user_data.get(update.message.from_user.id, False):
                    user_data[update.message.from_user.id] = {}
                user_data[update.message.from_user.id]['calc'] = dict(temp_dict, **{"date": date})
            else:
                return

        castles = ['ü¶á', '‚òòÔ∏è', 'üçÅ', 'üçÜ', 'üåπ', 'üñ§', 'üê¢']
        keyboard = []
        row = []
        for castle in castles:
            if len(row) > 3:
                keyboard.append(row)
                row = []

            row.append(InlineKeyboardButton(text=castle, callback_data=castle))
        keyboard.append(row)
        reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
        text = '–î–ª—è –∫–æ–≥–æ —Å—á–∏—Ç–∞–µ–º?'
        context.bot.send_message(
            chat_id=chat_id,
            text=text,
            reply_markup=reply_markup)
    else:
        text = '–ù–µ –≤–∏–∂—É –∫—É–¥–∞, —Å–¥–µ–ª–∞–π reply'
        context.bot.send_message(chat_id=chat_id, text=text)


@admin_decorator
def whois(update, context):
    chat_id = update.message.chat_id
    text = ''
    users = get_user_data(type='requestProfile')
    for user in users:
        user_data = json.loads(user.data)
        if user_data.get('guild_tag'):
            text += '\n[{}]{} {} {}'.format(
                user_data.get('guild_tag'), user_data.get('userName'), user_data.get('class'), user_data.get('lvl'))
        else:
            text += '\n{} {} {}'.format(user_data.get('userName'), user_data.get('class'), user_data.get('lvl'))
    context.bot.send_message(chat_id, text)


def main():

    # Get the dispatcher to register handlers
    dp = updater.dispatcher

    # on different commands - answer in Telegram
    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CommandHandler("reports", reports))
    dp.add_handler(CommandHandler("me", me))
    dp.add_handler(CommandHandler("auth", auth))
    dp.add_handler(CommandHandler("wtb", wtb))
    dp.add_handler(CommandHandler("profile", profile))
    dp.add_handler(CommandHandler("update_profile", update_profile))
    dp.add_handler(CommandHandler("gs", gold_rules))
    dp.add_handler(CommandHandler("spend", spend_my_gold))
    dp.add_handler(CommandHandler("stock", stock))
    dp.add_handler(CommandHandler("auth_stock", auth_stock))
    dp.add_handler(CommandHandler("gs_enable", gs_enable))
    dp.add_handler(CommandHandler("gs_disable", gs_disable))
    dp.add_handler(CommandHandler("auth_guild", auth_guild))
    dp.add_handler(CommandHandler("guild", guild))
    dp.add_handler(CommandHandler("a_guilds", a_guilds))
    dp.add_handler(CommandHandler("a_spots", a_spots))
    dp.add_handler(CommandHandler("worldtop", worldtop))
    dp.add_handler(CommandHandler("wtop", wtop))
    dp.add_handler(CommandHandler("calc", calculate_atak))
    dp.add_handler(CommandHandler("spot", find_spot))
    dp.add_handler(CommandHandler("delspot", del_spot))
    dp.add_handler(CommandHandler("whois", whois))
    dp.add_handler(CommandHandler("dug", myguild_duels))
    dp.add_handler(CommandHandler("du", myduels))
    dp.add_handler(CommandHandler("guilds", guilds))
    dp.add_handler(CommandHandler("users", users))
    dp.add_handler(CommandHandler("gear", gear))
    dp.add_handler(CommandHandler("auth_gear", auth_gear))
    dp.add_handler(CommandHandler("update_gear", update_gear))
    dp.add_handler(CommandHandler("sell_enable", sell_enable))
    dp.add_handler(CommandHandler("sell_disable", sell_disable))
    dp.add_handler(CommandHandler("as_enable", as_enable))
    dp.add_handler(CommandHandler("as_disable", as_disable))
    dp.add_handler(CommandHandler("add_mobu", add_mobu))

    # sub guilds for glory
    dp.add_handler(CommandHandler("sub_guild", sub_guild))
    dp.add_handler(CommandHandler("unsub_guild", unsub_guild))
    dp.add_handler(CommandHandler("list_sub_guild", list_sub_guilds))

    dp.add_handler(InlineQueryHandler(inlinequery))
    dp.add_handler(ChosenInlineResultHandler(on_result_chosen))

    # on noncommand i.e message - echo the message on Telegram
    dp.add_handler(MessageHandler(Filters.text & Filters.regex(r'\+\+time \d\d:\d\d'), add_time_trigger))
    dp.add_handler(MessageHandler(Filters.text & Filters.regex(r'\+\+deltime \d\d:\d\d'), del_time_trigger))
    dp.add_handler(MessageHandler(Filters.text & Filters.regex(r'\+\+listtime'), list_time_triggers))
    dp.add_handler(MessageHandler(Filters.text & Filters.regex(r'\+\+add [\s\w\/\d\.]+'), add_trigger))
    dp.add_handler(MessageHandler(Filters.text & Filters.regex(r'\+\+edit [\s\w\/\d]+'), edit_trigger))
    dp.add_handler(MessageHandler(Filters.text & Filters.regex(r'\+\+del [\s\w\/\d]+'), del_trigger))
    dp.add_handler(MessageHandler(Filters.text & Filters.regex(r'\+\+list'), list_triggers))
    dp.add_handler(MessageHandler(Filters.text & Filters.regex(r'\+\+help'), help))
    dp.add_handler(MessageHandler(Filters.text & Filters.regex(r'\+\+ali'), list_ali_spots))
    dp.add_handler(MessageHandler(Filters.text & Filters.regex(r'\+\+delali [\s\w\/\d]+'), del_ali_spot))
    dp.add_handler(MessageHandler(Filters.text, trigger_me))
    dp.add_handler(CallbackQueryHandler(inline_button))

    # log all errors
    dp.add_error_handler(error)

    # job.run_repeating(mailing_task, interval=300, first=0)
    # Start the Bot
    updater.start_polling()
    updater.idle()


def start_time_triggers():
    all_triggers = get_all_time_triggers()
    if all_triggers:
        for trigger in all_triggers:

            utcmoment_naive = datetime.utcnow()
            utcmoment = utcmoment_naive.replace(tzinfo=pytz.utc)
            now = utcmoment.astimezone(pytz.timezone(TIMEZONE))

            hours = int(trigger.time.split(':')[0])
            minutes = int(trigger.time.split(':')[1])
            trigger_time = now.replace(hour=hours, minute=minutes, second=0)
            first = (trigger_time - now).seconds
            print(first)
            job.run_repeating(send_time_trigger, interval=86400, first=first)

    # spend gold
    utcmoment_naive = datetime.utcnow()
    utcmoment = utcmoment_naive.replace(tzinfo=pytz.utc)
    now = utcmoment.astimezone(pytz.timezone(TIMEZONE))
    if now.hour > 9 and now.hour < 17:
        trigger_time = now.replace(hour=16, minute=45, second=0)
    elif now.hour > 1 and now.hour < 9:
        trigger_time = now.replace(hour=8, minute=45, second=0)
    else:
        trigger_time = now.replace(hour=0, minute=45, second=0)

    first = (trigger_time - now).seconds
    print('first will be in {} sec'.format(first))
    job.run_repeating(glory_update, interval=28800, first=(first + 1260))
    job.run_repeating(all_gear_update, interval=28800, first=(first + 1260))
    job.run_repeating(auto_spend_gold, interval=28800, first=first)
    trigger_time = now.replace(minute=58, second=0)
    first = (trigger_time - now).seconds
    job.run_repeating(glory_update, interval=3600, first=first)


def init_db():
    db.connect()
    from alliances.models import Alliances, Spot
    from triggers.models import Trigger, TimeTrigger
    from users.models import UserData, GoldRules, WtbLogs, Duels, Users, Guilds, Request, Token, Report, UserSettings
    from core.models import (WorldTop)
    from public.models import Prices
    from mobu.models import Messages, Chats
    db.create_tables(
        [Trigger, TimeTrigger, Spot, Report, Token, Request, Guilds, GuildsGlory, Users, Chats, Messages,
         UserData, GoldRules, WtbLogs, Alliances, WorldTop, Duels, Prices, UserSettings], safe=True)
    db.close()


updater = Updater(TOKEN, use_context=True)
job = updater.job_queue

if __name__ == '__main__':
    init_db()
    start_time_triggers()
    main()
